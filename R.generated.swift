//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 10 images.
  struct image {
    /// Image `add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "add")
    /// Image `back1`.
    static let back1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "back1")
    /// Image `back2`.
    static let back2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "back2")
    /// Image `back3`.
    static let back3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "back3")
    /// Image `background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "background")
    /// Image `chat`.
    static let chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat")
    /// Image `done`.
    static let done = Rswift.ImageResource(bundle: R.hostingBundle, name: "done")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `line_login_off`.
    static let line_login_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "line_login_off")
    /// Image `line_login_on`.
    static let line_login_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "line_login_on")
    
    /// `UIImage(named: "add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back1", bundle: ..., traitCollection: ...)`
    static func back1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back2", bundle: ..., traitCollection: ...)`
    static func back2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back3", bundle: ..., traitCollection: ...)`
    static func back3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chat", bundle: ..., traitCollection: ...)`
    static func chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "done", bundle: ..., traitCollection: ...)`
    static func done(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.done, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "line_login_off", bundle: ..., traitCollection: ...)`
    static func line_login_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line_login_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "line_login_on", bundle: ..., traitCollection: ...)`
    static func line_login_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line_login_on, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `ChatInputBottomView`.
    static let chatInputBottomView = _R.nib._ChatInputBottomView()
    /// Nib `ClovaSpeechListCell`.
    static let clovaSpeechListCell = _R.nib._ClovaSpeechListCell()
    /// Nib `DmMyChatViewCell`.
    static let dmMyChatViewCell = _R.nib._DmMyChatViewCell()
    /// Nib `DmPostCell`.
    static let dmPostCell = _R.nib._DmPostCell()
    /// Nib `DmYourChatViewCell`.
    static let dmYourChatViewCell = _R.nib._DmYourChatViewCell()
    
    /// `UINib(name: "ChatInputBottomView", in: bundle)`
    static func chatInputBottomView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatInputBottomView)
    }
    
    /// `UINib(name: "ClovaSpeechListCell", in: bundle)`
    static func clovaSpeechListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.clovaSpeechListCell)
    }
    
    /// `UINib(name: "DmMyChatViewCell", in: bundle)`
    static func dmMyChatViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dmMyChatViewCell)
    }
    
    /// `UINib(name: "DmPostCell", in: bundle)`
    static func dmPostCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dmPostCell)
    }
    
    /// `UINib(name: "DmYourChatViewCell", in: bundle)`
    static func dmYourChatViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dmYourChatViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 5 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ClovaSpeechListCell`.
    static let clovaSpeechListCell: Rswift.ReuseIdentifier<ClovaSpeechListCell> = Rswift.ReuseIdentifier(identifier: "ClovaSpeechListCell")
    /// Reuse identifier `DmPostCell`.
    static let dmPostCell: Rswift.ReuseIdentifier<DmPostCell> = Rswift.ReuseIdentifier(identifier: "DmPostCell")
    /// Reuse identifier `DmYourChatViewCell`.
    static let dmYourChatViewCell: Rswift.ReuseIdentifier<DmYourChatViewCell> = Rswift.ReuseIdentifier(identifier: "DmYourChatViewCell")
    /// Reuse identifier `MyChat`.
    static let myChat: Rswift.ReuseIdentifier<DmMyChatViewCell> = Rswift.ReuseIdentifier(identifier: "MyChat")
    /// Reuse identifier `topCollectionVIewCell`.
    static let topCollectionVIewCell: Rswift.ReuseIdentifier<TopViewControllerCell> = Rswift.ReuseIdentifier(identifier: "topCollectionVIewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `AddClovaViewController`.
    static let addClovaViewController = _R.storyboard.addClovaViewController()
    /// Storyboard `ClovaSpeechList`.
    static let clovaSpeechList = _R.storyboard.clovaSpeechList()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LoginViewController`.
    static let loginViewController = _R.storyboard.loginViewController()
    /// Storyboard `TopViewController`.
    static let topViewController = _R.storyboard.topViewController()
    
    /// `UIStoryboard(name: "AddClovaViewController", bundle: ...)`
    static func addClovaViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addClovaViewController)
    }
    
    /// `UIStoryboard(name: "ClovaSpeechList", bundle: ...)`
    static func clovaSpeechList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.clovaSpeechList)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "LoginViewController", bundle: ...)`
    static func loginViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.loginViewController)
    }
    
    /// `UIStoryboard(name: "TopViewController", bundle: ...)`
    static func topViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.topViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _DmYourChatViewCell.validate()
    }
    
    struct _ChatInputBottomView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ChatInputBottomView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ClovaSpeechListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ClovaSpeechListCell
      
      let bundle = R.hostingBundle
      let identifier = "ClovaSpeechListCell"
      let name = "ClovaSpeechListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ClovaSpeechListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ClovaSpeechListCell
      }
      
      fileprivate init() {}
    }
    
    struct _DmMyChatViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DmMyChatViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MyChat"
      let name = "DmMyChatViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DmMyChatViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DmMyChatViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _DmPostCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DmPostCell
      
      let bundle = R.hostingBundle
      let identifier = "DmPostCell"
      let name = "DmPostCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DmPostCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DmPostCell
      }
      
      fileprivate init() {}
    }
    
    struct _DmYourChatViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DmYourChatViewCell
      
      let bundle = R.hostingBundle
      let identifier = "DmYourChatViewCell"
      let name = "DmYourChatViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DmYourChatViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DmYourChatViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Image' is used in nib 'DmYourChatViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try topViewController.validate()
      try addClovaViewController.validate()
      try loginViewController.validate()
    }
    
    struct addClovaViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AddClovaViewController
      
      let bundle = R.hostingBundle
      let name = "AddClovaViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "back1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back1' is used in storyboard 'AddClovaViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "done") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'done' is used in storyboard 'AddClovaViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct clovaSpeechList: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = ClovaSpeechListViewController
      
      let bundle = R.hostingBundle
      let name = "ClovaSpeechList"
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct loginViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController
      
      let bundle = R.hostingBundle
      let name = "LoginViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "background") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'LoginViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "line_login_off") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'line_login_off' is used in storyboard 'LoginViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "line_login_on") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'line_login_on' is used in storyboard 'LoginViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct topViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TopViewController
      
      let bundle = R.hostingBundle
      let name = "TopViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "back3") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back3' is used in storyboard 'TopViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chat") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chat' is used in storyboard 'TopViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "home") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home' is used in storyboard 'TopViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "add") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add' is used in storyboard 'TopViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
